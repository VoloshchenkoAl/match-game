{"version":3,"sources":["Services/validation/pictureSearch.ts","Machines/initGame/initGame.ts","Components/Input/Input.tsx","Components/Button/Button.tsx","Pages/Start/StartComponent.tsx","Services/api/helpers/request.ts","Services/api/cards/mapper.ts","Services/api/cards/cards.ts","Pages/Start/StartContainer.tsx","Pages/Start/utils.ts","Machines/card/card.ts","Components/Card/Card.tsx","Pages/Game/GameComponent.tsx","Pages/Game/GameContainer.tsx","Machines/game/game.ts","App.tsx","Machines/game/selector.ts","index.tsx"],"names":["VALID_SEARCH_REGEXP","initGameMachine","createMachine","id","initial","context","value","error","states","editing","idle","invalid","on","CHANGE","actions","target","SUBMIT","validating","invoke","src","ctx","Promise","resolve","reject","length","test","onDone","onError","validated","entry","clearErrorCode","assign","errorCode","undefined","setValue","_","event","setError","data","toString","Input","props","onChange","label","type","className","e","inputValue","style","color","displayName","defaultProps","Button","children","onClick","StartComponent","handleInputChange","handleSearchImages","searchValidationError","onSubmit","preventDefault","makeUrl","url","query","parseQuery","querystring","parse","normalizeQuery","stringify","makeConfig","method","headers","config","body","JSON","makeRequest","params","a","requestUrl","requestConfig","fetch","resp","ok","Error","statusText","status","json","respData","cardsMapper","imagesResponse","results","gameCards","forEach","cardInfo","gameCard","uniqKey","author","name","user","link","links","self","description","image","urls","regular","push","cardsApi","searchValue","Authorization","process","orientation","StartContainer","handleLoadCars","useMachine","services","submit","cards","state","send","cardMachine","Machine","revealed","DETAIL","unguessed","REVEAL","detailed","REVEAL_DETAILED","UNGUESSED","Card","isRevealed","useEffect","onMouseEnter","onMouseLeave","matches","alt","href","GameComponent","openedCards","handleClick","forceOpenedCards","attempts","map","card","some","openedCard","key","GameContainer","dispatcher","roundMatch","openCards","Array","from","Set","cardImprint","gameMachine","sourceCard","start","SET_CARDS","prepare","after","5000","playing","MATCH","cond","gameMatch","gameOver","win","exit","EXIT_GAME","PLAY_AGAIN","hideForceOpenedCards","setCards","i","index","sort","Math","random","setRoundMatch","concat","updateCardsInfo","every","resetGame","guards","checkRound","gameOverCheck","winCheck","App","history","useHistory","gameWin","gameState","gameDispatch","path","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7cd295d.chunk.js","sourcesContent":["const VALID_SEARCH_REGEXP = /\\w./;\n\nfunction pictureSearchValidation(\n  value: string,\n): Promise<'EMPTY' | 'INVALID_CHARACTERS'> {\n  return new Promise((resolve, reject) => {\n    if (value.length === 0) {\n      reject('EMPTY');\n    } else if (!VALID_SEARCH_REGEXP.test(value)) {\n      reject('INVALID_CHARACTERS');\n    } else {\n      resolve();\n    }\n  });\n}\n\nexport { pictureSearchValidation };\n","import { createMachine, assign } from 'xstate';\nimport { pictureSearchValidation } from 'Services/validation/pictureSearch';\n\nconst initGameMachine = createMachine<\n  InitGameMachineContext,\n  InitGameMachineEvent,\n  InitGameMachineState\n>(\n  {\n    id: 'initGameMachine',\n    initial: 'editing',\n    context: {\n      value: '',\n      error: '',\n    },\n    states: {\n      editing: {\n        initial: 'idle',\n        states: {\n          idle: {},\n          invalid: {},\n        },\n        on: {\n          CHANGE: {\n            actions: ['clearErrorCode', 'setValue'],\n            target: '.idle',\n          },\n          SUBMIT: 'validating',\n        },\n      },\n      validating: {\n        invoke: {\n          id: 'validating',\n          src: (ctx) => pictureSearchValidation(ctx.value),\n          onDone: 'validated',\n          onError: {\n            target: 'editing.invalid',\n            actions: 'setError',\n          },\n        },\n      },\n      validated: {\n        entry: ['clearErrorCode'],\n        invoke: {\n          id: 'submitForm',\n          src: 'submit',\n          onDone: 'editing',\n          onError: {\n            target: 'editing.invalid',\n            actions: 'setError',\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      clearErrorCode: assign((ctx) => ({\n        ...ctx,\n        errorCode: undefined,\n      })),\n      setValue: assign({\n        value: (_, event: any) => event.value,\n      }),\n      setError: assign({\n        error: (_, event: any) => event.data.toString(),\n      }),\n    },\n  },\n);\n\nexport { initGameMachine };\n","import React from 'react';\n\n/* @Types */\nimport { InputProps } from './types';\n\n/* @Styles */\nimport './Input.css';\n\nconst Input: React.FunctionComponent<InputProps> = (props) => {\n  const { onChange, value, label, type, error } = props;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = e.target;\n\n    onChange(inputValue);\n  };\n\n  return (\n    <div>\n      <label>\n        {!!label ? <span>{label}</span> : null}\n        <input\n          className=\"input\"\n          type={type}\n          value={value}\n          onChange={handleChange}\n        />\n        {!!error ? (\n          <>\n            <br />\n            <span style={{ color: 'tomato' }}>{error}</span>\n          </>\n        ) : null}\n      </label>\n    </div>\n  );\n};\n\nInput.displayName = 'Input';\nInput.defaultProps = {\n  type: 'text',\n};\n\nexport { Input };\n","import React from 'react';\n\n/* @Types */\nimport { ButtonProps } from './types';\n\n/* @Styles */\nimport './Button.css';\n\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\n  const { children, onClick, type } = props;\n\n  return (\n    <button type={type} className=\"button\" onClick={onClick}>\n      {children}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  type: 'button',\n};\n\nexport { Button };\n","import React from 'react';\n\n/* @Types */\nimport { StartComponentProps } from './types';\n\n/* @Components */\nimport { Input } from 'Components/Input';\nimport { Button } from 'Components/Button';\n\n/* @Styles */\nimport './Start.css';\n\nconst StartComponent: React.FunctionComponent<StartComponentProps> = (\n  props,\n) => {\n  const {\n    handleInputChange,\n    handleSearchImages,\n    value,\n    searchValidationError,\n  } = props;\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    handleSearchImages();\n  };\n\n  return (\n    <div className=\"start-game__container\">\n      <h1>Write any word to start to play the game</h1>\n\n      <form onSubmit={onSubmit} className=\"start-game__form\">\n        <Input\n          value={value}\n          onChange={handleInputChange}\n          error={searchValidationError}\n        />\n        <Button type=\"submit\">start game!</Button>\n      </form>\n    </div>\n  );\n};\n\nexport { StartComponent };\n","import querystring from 'querystring';\n\ntype Data = {\n  [key: string]: any;\n};\n\ntype Headers = {\n  [key: string]: string;\n};\n\ninterface Request {\n  url: string;\n  method: 'GET' | 'POST';\n  query?: string | any;\n  data?: Data;\n  headers?: Headers;\n}\n\ninterface FetchConfig {\n  method: string;\n  headers: Headers;\n  body?: string;\n}\n\nfunction makeUrl(url: string, query?: string | any): string {\n  if (!query) {\n    return url;\n  }\n\n  let parseQuery = null;\n  if (typeof query === 'string') {\n    parseQuery = querystring.parse(query);\n  } else {\n    parseQuery = query;\n  }\n  const normalizeQuery = querystring.stringify(parseQuery);\n\n  return `${url}?${normalizeQuery}`;\n}\n\nfunction makeConfig(method: string, data?: Data, headers?: Headers) {\n  const config: FetchConfig = {\n    method,\n    headers: {},\n  };\n\n  if (typeof headers === 'object') {\n    config.headers = headers;\n  }\n\n  if (typeof data === 'object') {\n    config.body = JSON.stringify(data);\n    config.headers['Content-Type'] = 'application/json';\n  }\n\n  return config;\n}\n\nexport async function makeRequest(params: Request): Promise<any> {\n  const { url, method, query, data, headers } = params;\n  const requestUrl = makeUrl(url, query);\n  const requestConfig = makeConfig(method, data, headers);\n\n  const resp = await fetch(requestUrl, requestConfig);\n\n  if (!resp.ok) {\n    throw new Error(\n      `${resp.statusText} ${resp.status} for url ${url}`,\n    );\n  }\n\n  const respData = await resp.json();\n\n  return respData;\n}\n","export const cardsMapper = (\n  imagesResponse: UnsplashSearchResponse,\n): GameCard[] => {\n  const { results } = imagesResponse;\n  const gameCards: GameCard[] = [];\n\n  results.forEach((cardInfo: UnsplashSearchPhoto) => {\n    const gameCard: GameCard = {\n      id: cardInfo.id,\n      uniqKey: cardInfo.id,\n      author: {\n        name: cardInfo.user.name,\n        link: cardInfo.user.links.self,\n      },\n      description: cardInfo.description,\n      image: {\n        link: cardInfo.urls.regular,\n      },\n    };\n\n    gameCards.push(gameCard);\n  });\n\n  return gameCards;\n};\n","/* @Helpers */\nimport { makeRequest } from 'Services/api/helpers/request';\n\n/* @Mappers */\nimport { cardsMapper } from './mapper';\n\nexport const cardsApi = {\n  async get(searchValue: string): Promise<GameCard[]> {\n    const url = 'https://api.unsplash.com/search/photos';\n    const method = 'GET';\n    const headers = {\n      Authorization: `Client-ID ${process.env.REACT_APP_UNSPLASH_AUTH_KEY}`,\n    };\n    const query = {\n      query: searchValue,\n      orientation: 'landscape',\n    };\n\n    const data: UnsplashSearchResponse = await makeRequest({\n      url,\n      method,\n      headers,\n      query,\n    });\n\n    return cardsMapper(data);\n  },\n};\n","import React from 'react';\nimport { useMachine } from '@xstate/react';\n\n/* @Types */\nimport { StartContainerProps } from './types';\n\n/* @Machine */\nimport { initGameMachine } from 'Machines/initGame';\n\n/* @Components */\nimport { StartComponent } from './StartComponent';\n\n/* @Api */\nimport { cardsApi } from 'Services/api/cards';\n\n/* @Utils */\nimport { getValidationText } from './utils';\n\nconst StartContainer: React.FunctionComponent<StartContainerProps> = (\n  props,\n) => {\n  const { handleLoadCars } = props;\n\n  const [state, send] = useMachine(initGameMachine, {\n    services: {\n      async submit(ctx) {\n        const cards = await cardsApi.get(ctx.value);\n        handleLoadCars(cards);\n      },\n    },\n  });\n\n  const onChangeInputValue = (value: string): void => {\n    send({ type: 'CHANGE', value });\n  };\n\n  const onSearchImages = (): void => {\n    send({ type: 'SUBMIT' });\n  };\n\n  const searchValidationError = getValidationText(\n    state.context.error,\n  );\n\n  return (\n    <StartComponent\n      searchValidationError={searchValidationError}\n      handleInputChange={onChangeInputValue}\n      value={state.context.value}\n      handleSearchImages={onSearchImages}\n    />\n  );\n};\n\nexport { StartContainer };\n","export const getValidationText = (\n  errorCode: SEARCH_ERROR_CODE,\n): string => {\n  if (errorCode === 'EMPTY') {\n    return 'Field is empty';\n  } else if (errorCode === 'INVALID_CHARACTERS') {\n    return 'Try to change your characters';\n  } else if (errorCode === 'NO_RESULT') {\n    return 'Can not find any photos';\n  }\n\n  return errorCode;\n};\n","import { Machine } from 'xstate';\n\nconst cardMachine = Machine<CardState, CardEvent>({\n  id: 'cardMachine',\n  initial: 'unguessed',\n  states: {\n    revealed: {\n      on: {\n        DETAIL: {\n          target: 'detailed',\n        },\n      },\n    },\n    unguessed: {\n      on: {\n        REVEAL: {\n          target: 'revealed',\n        },\n      },\n    },\n    detailed: {\n      on: {\n        REVEAL_DETAILED: {\n          target: 'revealed',\n        },\n      },\n    },\n  },\n  on: {\n    UNGUESSED: {\n      target: 'unguessed',\n    },\n  },\n});\n\nexport { cardMachine };\n","import React, { useEffect } from 'react';\nimport { useMachine } from '@xstate/react';\n\n/* @Machine */\nimport { cardMachine } from 'Machines/card';\n\n/* @Types */\nimport { CardProps } from './types';\n\n/* @Styles */\nimport './Card.css';\n\nconst Card: React.FunctionComponent<CardProps> = (props) => {\n  const [state, send] = useMachine(cardMachine);\n  const {\n    isRevealed,\n    image,\n    description,\n    author,\n    id,\n    onClick,\n    uniqKey,\n  } = props;\n\n  useEffect(() => {\n    const type = isRevealed ? 'REVEAL' : 'UNGUESSED';\n    send({ type });\n  }, [isRevealed, send]);\n\n  const handleMouseEnter = () => {\n    send({ type: 'DETAIL' });\n  };\n\n  const handleMouseLeave = () => {\n    send({ type: 'REVEAL_DETAILED' });\n  };\n\n  return (\n    <div\n      className=\"game-card\"\n      onClick={() => onClick({ id, uniqKey })}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {state.matches('unguessed') ? (\n        <div className=\"game-card__hide\" />\n      ) : (\n        <div className=\"game-card-info\">\n          <img src={image.link} alt={description} />\n          {state.matches('detailed') ? (\n            <div className=\"game-card-detailed\">\n              <span>\n                {author.name} on <a href={author.link}>Unsplash</a>\n              </span>\n            </div>\n          ) : null}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport { Card };\n","import React from 'react';\n\n/* @Types */\nimport { GameComponentProps } from './types';\n\n/* @Components */\nimport { Card } from 'Components/Card';\n\n/* @Styles */\nimport './Game.css';\n\nconst GameComponent: React.FunctionComponent<GameComponentProps> = (\n  props,\n) => {\n  const {\n    cards,\n    openedCards,\n    handleClick,\n    forceOpenedCards,\n    attempts,\n  } = props;\n\n  return (\n    <section className=\"game_section\">\n      <h2>You have {3 - attempts} attempts</h2>\n      <section className=\"game_play\">\n        {cards.map((card) => (\n          <Card\n            isRevealed={\n              forceOpenedCards ||\n              openedCards.some(\n                (openedCard) => openedCard.uniqKey === card.uniqKey,\n              )\n            }\n            key={card.uniqKey}\n            onClick={handleClick}\n            {...card}\n          />\n        ))}\n      </section>\n    </section>\n  );\n};\n\nexport { GameComponent };\n","import React from 'react';\n\n/* @Types */\nimport { GameState } from 'Machines/game/types';\n\n/* @Components */\nimport { GameComponent } from './GameComponent';\n\ntype GameContainerProps = {\n  state: GameState;\n  dispatcher: (event: GameMachineEvent) => void;\n};\n\nconst GameContainer: React.FunctionComponent<GameContainerProps> = (\n  props,\n) => {\n  const { state, dispatcher } = props;\n  const {\n    cards,\n    roundMatch,\n    openCards,\n    forceOpenedCards,\n    attempts,\n  } = state.context;\n  const openedCards: CardImprint[] = Array.from(\n    new Set([...roundMatch, ...openCards]),\n  );\n\n  const handleClick = (cardImprint: CardImprint) => {\n    dispatcher({\n      type: 'MATCH',\n      cardImprint,\n    });\n  };\n\n  return (\n    <GameComponent\n      cards={cards}\n      openedCards={openedCards}\n      handleClick={handleClick}\n      forceOpenedCards={forceOpenedCards}\n      attempts={attempts}\n    />\n  );\n};\n\nexport { GameContainer };\n","import { Machine, assign } from 'xstate';\n\nconst maxAttempts: number = 3;\nconst matchCards: number = 2;\nconst checkDelay: number = 500;\n\nconst gameMachine = Machine<\n  GameMachineContext,\n  GameMachineState,\n  GameMachineEvent\n>(\n  {\n    id: 'gameMachine',\n    initial: 'start',\n    context: {\n      sourceCard: [],\n      cards: [],\n      attempts: 0,\n      roundMatch: [],\n      openCards: [],\n      forceOpenedCards: true,\n    },\n    states: {\n      start: {\n        on: {\n          SET_CARDS: {\n            target: 'prepare',\n            actions: 'setCards',\n          },\n        },\n      },\n      prepare: {\n        after: {\n          5000: {\n            target: 'playing',\n            actions: 'hideForceOpenedCards',\n          },\n        },\n      },\n      playing: {\n        initial: 'idle',\n        states: {\n          idle: {\n            on: {\n              MATCH: {\n                actions: 'setRoundMatch',\n                target: 'roundMatch',\n              },\n            },\n          },\n          roundMatch: {\n            after: {\n              [checkDelay]: [\n                {\n                  target: 'gameMatch',\n                  cond: 'checkRound',\n                },\n                { target: 'idle' },\n              ],\n            },\n          },\n          gameMatch: {\n            entry: 'updateCardsInfo',\n            on: {\n              '': [\n                {\n                  target: '#gameMachine.gameOver',\n                  cond: 'gameOverCheck',\n                },\n                {\n                  target: '#gameMachine.win',\n                  cond: 'winCheck',\n                },\n                { target: 'idle' },\n              ],\n            },\n          },\n        },\n      },\n      gameOver: {\n        entry: 'gameOver',\n      },\n      win: {\n        entry: 'gameWin',\n      },\n      exit: {\n        type: 'final',\n      },\n    },\n    on: {\n      EXIT_GAME: {\n        target: 'exit',\n      },\n      PLAY_AGAIN: {\n        target: 'playing',\n        actions: 'resetGame',\n      },\n    },\n  },\n  {\n    actions: {\n      hideForceOpenedCards: assign({\n        forceOpenedCards: (ctx, event) => false,\n      }),\n      setCards: assign({\n        cards: (ctx, event) => {\n          let gameCards: GameCard[] = [];\n          const { cards } = event as SetCardsEvent;\n\n          for (let i = 0; i < matchCards; i++) {\n            gameCards = [...gameCards, ...cards];\n          }\n\n          gameCards = gameCards.map((card, index) => ({\n            ...card,\n            uniqKey: card.uniqKey + index,\n          }));\n\n          return gameCards.sort(() => Math.random() - 0.5);\n        },\n        sourceCard: (ctx, event) => (event as SetCardsEvent).cards,\n      }),\n      setRoundMatch: assign({\n        roundMatch: (ctx, event) =>\n          ctx.roundMatch.concat((event as MatchEvent).cardImprint),\n      }),\n      updateCardsInfo: assign((ctx) => {\n        const { openCards, attempts, roundMatch } = ctx;\n        const isCardsSame = roundMatch.every(\n          (card) => card.id === roundMatch[0].id,\n        );\n\n        if (isCardsSame) {\n          return {\n            ...ctx,\n            roundMatch: [],\n            openCards: [...openCards, ...roundMatch],\n          };\n        }\n\n        return {\n          ...ctx,\n          roundMatch: [],\n          attempts: attempts + 1,\n        };\n      }),\n      resetGame: assign((ctx) => ({\n        ...ctx,\n        attempts: 0,\n        openCards: [],\n        roundMatch: [],\n      })),\n    },\n    guards: {\n      checkRound: (ctx) => matchCards === ctx.roundMatch.length,\n      gameOverCheck: (ctx) => ctx.attempts >= maxAttempts,\n      winCheck: (ctx) => ctx.openCards.length === ctx.cards.length,\n    },\n  },\n);\n\nexport { gameMachine };\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  useHistory,\n  Redirect,\n} from 'react-router-dom';\nimport { useMachine } from '@xstate/react';\n\n/* @Selectors */\nimport { isCardsExistsSelector } from 'Machines/game/selector';\n\n/* @Pages */\nimport { Start } from 'Pages/Start';\nimport { Game } from 'Pages/Game';\n\n/* @Machine */\nimport { gameMachine } from 'Machines/game';\n\nconst App = () => {\n  const history = useHistory();\n  const [gameState, gameDispatch] = useMachine(gameMachine, {\n    actions: {\n      gameOver: () => history.push('/game-over'),\n      gameWin: () => history.push('/win'),\n    },\n  });\n\n  const onLoadCards = (cards: GameCard[]) => {\n    gameDispatch({\n      type: 'SET_CARDS',\n      cards,\n    });\n\n    history.push('/game');\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/game\">\n        {isCardsExistsSelector(gameState.context) ? (\n          <Game state={gameState} dispatcher={gameDispatch} />\n        ) : (\n          <Redirect to=\"/\" />\n        )}\n      </Route>\n      <Route path=\"/game-over\">\n        <h1>Your Loose!</h1>\n      </Route>\n      <Route path=\"/win\">\n        <h1>Your Win!</h1>\n      </Route>\n      <Route path=\"/\">\n        <Start handleLoadCars={onLoadCards} />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default App;\n","/* @Types */\nimport { GameState } from './types';\n\nexport const isCardsExistsSelector = (\n  gameContext: GameMachineContext,\n): boolean => {\n  const { sourceCard } = gameContext;\n\n  return sourceCard.length > 0;\n};\n\nexport const isGameOverSelector = (gameState: GameState): boolean =>\n  gameState.matches('gameOver');\n\nexport const isGameWinSelector = (gameState: GameState): boolean =>\n  gameState.matches('win');\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}